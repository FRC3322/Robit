#include "Shoot.h"
Shoot::Shoot() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	inSpeedMode = false;
	timeToSwitchToSpeedMode = 0.0;
}
// Called just before this Command runs the first time
void Shoot::Initialize() {
	inSpeedMode = false;
	timeToSwitchToSpeedMode = Timer::GetPPCTimestamp() + 2.0;
	// Temporarily set the motor to Voltage mode with a ramp to avoid
	// current faulting the shooting motor. Once the motor starts moving
	// it can be switched into speed mode.
	Robot::shooter->mainMotor->ChangeControlMode(CANJaguar::kVoltage);
	Robot::shooter->mainMotor->SetVoltageRampRate(6.0);
	Robot::shooter->mainMotor->EnableControl();
}
// Called repeatedly when this Command is scheduled to run
void Shoot::Execute() {
	if (inSpeedMode) {
		double shooterSpeed = SmartDashboard::GetNumber("ShooterSpeed");
		Robot::shooter->mainMotor->Set(shooterSpeed);
		if (Robot::shooter->shooterSpeed >= shooterSpeed * 0.9) {
			// Once the main shooter gets up to 90% of target speed, start
			// feeding the frisbees.
			double feederSpeed = SmartDashboard::GetNumber("FeederSpeed");
			Robot::shooter->feedMotor->Set(feederSpeed);
			Robot::shooter->flipper->Set(Relay::kReverse);
		}
	}
	else if (Timer::GetPPCTimestamp() >= timeToSwitchToSpeedMode) {
		Robot::shooter->mainMotor->ChangeControlMode(CANJaguar::kSpeed);
		Robot::shooter->mainMotor->SetSpeedReference(CANJaguar::kSpeedRef_QuadEncoder);
		Robot::shooter->mainMotor->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
		Robot::shooter->mainMotor->ConfigEncoderCodesPerRev(360);
		Robot::shooter->mainMotor->SetPID(SmartDashboard::GetNumber("P"),
										  SmartDashboard::GetNumber("I"),
										  SmartDashboard::GetNumber("D"));
		Robot::shooter->mainMotor->EnableControl();
		inSpeedMode = true;
		double shooterSpeed = SmartDashboard::GetNumber("ShooterSpeed");
		Robot::shooter->mainMotor->Set(shooterSpeed);
	}
	else {
		Robot::shooter->mainMotor->Set(6.0);
	}
}
// Make this return true when this Command no longer needs to run execute()
bool Shoot::IsFinished() {
	// This command is connected to a WhileHeld button. When the button
	// is released, the command is cancelled and the default subsystem
	// command activates.
	return false;
}
// Called once after isFinished returns true
void Shoot::End() {
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Shoot::Interrupted() {
}
