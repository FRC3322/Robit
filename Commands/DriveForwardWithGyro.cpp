// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "DriveForwardWithGyro.h"


DriveForwardWithGyro::DriveForwardWithGyro() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	gyro = RobotMap::supportGyro;
	//output = new PIDOutput;
	//pid = new PIDController(0.1, 0, 0, gyro, output);
}

// Called just before this Command runs the first time
void DriveForwardWithGyro::Initialize() {
	double timeout = SmartDashboard::GetNumber("Fwd Duration");
	if (timeout < 0.0) timeout = 0.0;
	if (timeout > 20.0) timeout = 20.0;
	SetTimeout(timeout);
	gyro->Reset();
}

// Called repeatedly when this Command is scheduled to run
void DriveForwardWithGyro::Execute() {
	double speed = SmartDashboard::GetNumber("Fwd Speed");
	double turnSpeed = gyro->GetAngle() * -0.1;
	int mode = (int)Robot::oi->fwdChooser->GetSelected();
	if (speed > 0.5) speed = 0.5;
	if (turnSpeed > 0.8) turnSpeed = 0.8;
	else if(turnSpeed < -0.8) turnSpeed = -0.8;
	if (mode == 1) {
		Robot::drivetrain->drive->TankDrive(0.90 * speed, speed, false);
	}
	else if (mode == 2) {
		Robot::drivetrain->drive->ArcadeDrive(speed, turnSpeed, false);
	}
	else {
		Robot::drivetrain->drive->Drive(speed, 0.0);
	}	
}

// Make this return true when this Command no longer needs to run execute()
bool DriveForwardWithGyro::IsFinished() {
	return IsTimedOut();
}

// Called once after isFinished returns true
void DriveForwardWithGyro::End() {
	Robot::drivetrain->drive->Drive(0.0, 0.0);	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveForwardWithGyro::Interrupted() {
	End();
}
