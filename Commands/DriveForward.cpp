#include "DriveForward.h"
#include <math.h>
DriveForward::DriveForward(double d, double s) {
	defaultDistance = d;
	distance = 0.0;
	defaultSpeed = fabs(s)*(distance < 0.0 ? -1 : 1);
	speed = 0.0;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
void DriveForward::Initialize() {
	Robot::ResetDistanceTraveled();
	distance = (defaultDistance == 0.0) ? SmartDashboard::GetNumber("RobotTravelDistance") : defaultDistance;
	speed = (defaultSpeed == 0.0) ? fabs(SmartDashboard::GetNumber("Fwd Speed")) : defaultSpeed;
	if (distance < 0.0) speed = -speed;
	keepGoingUntilTime = distance / (Robot::MAX_MAX_SPEED*speed);
	double timeout = distance / (Robot::MIN_MAX_SPEED*speed);	// time = distance /speed
	if (timeout > 15.0) timeout = 15.0;							// autonomous is only 15 seconds
	SetTimeout(timeout);
}
void DriveForward::Execute() {
	double curve = 5.0 * Robot::AngleFacing() / 90.0;
	if (speed > 0.0) curve = -curve;
	Robot::drivetrain->drive->Drive(-speed, curve);	// FIXME replace with PID
}
bool DriveForward::IsFinished() {
	return (Timer::GetPPCTimestamp() >= keepGoingUntilTime &&
			fabs(Robot::DistanceTraveled()) >= fabs(distance)) || IsTimedOut();
}
void DriveForward::End() {
	Robot::drivetrain->drive->Drive(0.0, 0.0);
}
void DriveForward::Interrupted() {
	End();
}
