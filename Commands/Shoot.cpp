// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "Shoot.h"
Shoot::Shoot() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void Shoot::Initialize() {
	SetTimeout(2.0);
	Robot::shooter->mainMotor->ChangeControlMode(CANJaguar::kPercentVbus);
	Robot::shooter->mainMotor->EnableControl();
	inSpeedMode = false;
	//Robot::shooter->mainMotor->SetVoltageRampRate(6.0); does not work because current faults still happen on fresh batteries
}
// Called repeatedly when this Command is scheduled to run
void Shoot::Execute() {
	if(IsTimedOut())
	{
		if(!inSpeedMode)
		{
			Robot::shooter->mainMotor->ChangeControlMode(CANJaguar::kSpeed);
			Robot::shooter->mainMotor->SetSpeedReference(CANJaguar::kSpeedRef_QuadEncoder);
			Robot::shooter->mainMotor->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
			Robot::shooter->mainMotor->ConfigEncoderCodesPerRev(360);
			Robot::shooter->mainMotor->SetPID(SmartDashboard::GetNumber("P"),
											  SmartDashboard::GetNumber("I"),
											  SmartDashboard::GetNumber("D"));
			Robot::shooter->mainMotor->EnableControl();
		}
		double speed = SmartDashboard::GetNumber("ShooterSpeed");
		Robot::shooter->mainMotor->Set(speed);
		if (Robot::shooter->shooterSpeed > 500.0 && Robot::shooter->shooterSpeed > speed * 0.9) {
			double speed = SmartDashboard::GetNumber("FeederSpeed");
			Robot::shooter->feedMotor->Set(speed);
			Robot::shooter->flipper->Set(Relay::kReverse);
		}
	}
	else
	{
		Robot::shooter->mainMotor->Set(0.5);
	}
}
// Make this return true when this Command no longer needs to run execute()
bool Shoot::IsFinished() {
	// This command is connected to a WhileHeld button. When the button
	// is released, the command is cancelled and the default subsystem
	// command activates.
	return false;
}
// Called once after isFinished returns true
void Shoot::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Shoot::Interrupted() {
}
