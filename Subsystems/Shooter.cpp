// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
#include "../Commands/Idleshooter.h"
Shooter::Shooter() : Subsystem("Shooter") {
	shooterSpeed = 0.0;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	mainMotor = RobotMap::shooterMainMotor;
	feedMotor = RobotMap::shooterFeedMotor;
	flipper = RobotMap::shooterFlipper;
	frisbeeDirection = RobotMap::shooterFrisbeeDirection;
	deploy = RobotMap::shooterDeploy;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Idleshooter());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Shooter::DeployShooter() {
	deploy->Set(DoubleSolenoid::kReverse);
}
void Shooter::RetractShooter() {
	deploy->Set(DoubleSolenoid::kForward);
}
void Shooter::ToggleDeploy() {
	DoubleSolenoid::Value setting = (deploy->Get() == DoubleSolenoid::kForward) ? DoubleSolenoid::kReverse : DoubleSolenoid::kForward;
	deploy->Set(setting);
}
